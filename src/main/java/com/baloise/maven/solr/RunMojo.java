package com.baloise.maven.solr;

import static com.baloise.maven.solr.SolrRunner.runSolr;
import static java.lang.String.format;

import java.io.File;
import java.io.IOException;
import java.net.UnknownHostException;

import org.apache.commons.io.FileUtils;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;


@Mojo(name = "run", defaultPhase = LifecyclePhase.NONE, requiresProject=false)
public class RunMojo extends AbstractMojo {

  @Parameter(defaultValue = "8983", property = "solr.port", required = true)
  int port;

  @Parameter(defaultValue = "/solr", property = "solr.context", required = true)
  String context;

  @Parameter(property = "solr.war", required = false)
  String war = null;
  
  SolrDownloader downloader = new SolrDownloader();
  
  protected void doExecute() throws MojoExecutionException, MojoFailureException {
    if (context.charAt(0) != '/') context = "/" + context;
    if(!context.equals("/solr")) {
    	getLog().warn("solr.context option is not supported any more. Context is always /solr");
    }
    if(war != null) {
    	getLog().warn("solr.war option is not supported any more. Ignoring.");
    }
    checkHome();
    getLog().info("solr.port: " + port);
    getLog().info("solr.version: " + version);
    getLog().info(format("Starting SOLR server at http://%s:%s%s", getHostName(), port, context));
    try {
      runSolr(downloader.download(version), home, port);
    }
    catch (Exception e) {
      getLog().error(e);
    }
  }

  private void checkHome() {
    final File solrXml = new File(home,"solr.xml");
    if(!new File(home,"collection1").exists() && !solrXml.exists()) {
      getLog().warn("solr.home: no cores found. (collection1 or solr.xml)");
      getLog().info("writing temporary "+solrXml.getAbsolutePath());
      String solrConf = "<!-- temporary solr.xml generated by solr-maven-plugin. Should be automatically cleaned up on JVM exit --><solr/>";
      solrXml.deleteOnExit();
      try {
        FileUtils.writeStringToFile(solrXml, solrConf, "UTF-8");
      }
      catch (IOException e) {
        getLog().warn(e);
      }
    }
    
  }

  private String getHostName() {
    try {
      return java.net.InetAddress.getLocalHost().getHostName();
    }
    catch (UnknownHostException e) {
      return "localhost";
    }
  }
  
  

}
